{"version":3,"sources":["components/LandingPage/dtnow_skline_mobile.svg","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/currentBedCountByIdReducer.js","redux/reducers/detoxInfoReducer.js","redux/reducers/allDetoxInfoReducer.js","redux/reducers/detoxLatLngReducer.js","redux/reducers/currentLocationReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/detoxSaga.js","redux/sagas/index.js","components/LoginPage/LoginTextFields.js","components/LoginPage/LoginPage.js","components/Registration/UserTextFields.js","components/Registration/RegisterUserPage.js","components/BackButton/BackButton.js","components/Registration/RegisterDetoxPage.js","components/AllDetoxCentersMap/AllDetoxCentersMapContainer.js","components/api_key.js","components/DetoxNowButton/DetoxNowButton.js","components/AllDetoxCentersMap/AllDetoxCentersMap.js","components/LandingPage/LandingPage.js","components/ProtectedRoute/ProtectedRoute.js","components/LogOutButton/LogOutButton.js","components/UserLoginNav/UserLoginNav.js","components/SMSForm/SMSForm.js","components/UserLogin/UserLogin.js","components/DetoxCenterLogin/DetoxCenterLogin.js","components/Registration/Registration.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","currentBedCountById","detoxInfo","alldetoxInfo","detoxLatLng","currentLocation","console","log","rootReducer","errors","user","allDetoxInfo","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","increaseSaga","decreaseSaga","getDetoxInfoByIdSaga","getDetoxInfoSaga","getDetoxWithLowestBedCountSaga","detoxSaga","reqId","call","concat","currentBedCount","detoxSaga_marked","detoxSaga_marked2","detoxSaga_marked3","_context4","_marked4","_context5","_marked5","_context6","_marked6","rootSaga","all","sagas_marked","textArea","textAlign","LoginTextFields","classes","props","react_default","createElement","InputLabel_default","htmlFor","TextField_default","id","style","label","variant","className","textField","value","username","InputLabelProps","root","cssLabel","focused","cssFocused","InputProps","cssOutlinedInput","notchedOutline","onChange","handleInputChangeFor","margin","password","React","Component","withStyles","theme","marginLeft","spacing","unit","marginRight","width","color","&$cssFocused $notchedOutline","borderColor","palette","primary","main","borderWidth","backgroundColor","root2","MyLink1","Link","Object","assign","to","LoginPage","clearance_level","getDetoxWithMostBedsAvailable","event","_this","dispatch","getGeoLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","lat","lng","login","preventDefault","propertyName","setState","defineProperty","target","prevProps","history","push","src","height","alt","dtnow_skline_mobile","role","LoginPage_LoginTextFields","index_es","size","onClick","component","connect","UserTextFields","RegisterPage","number","Registration_UserTextFields","MyLink","BackButton","Button_default","detox_center_name","address","city","zip","total_bed_count","onSubmit","name","components_BackButton_BackButton","AllDetoxCentersMapContainer","getAllDetoxInfo","isOpen","activeMarker","detox_id","_this2","lib","defaultZoom","center","reduxState","map","marker","key","Number","destination","Card_default","current_bed_count","href","withScriptjs","withGoogleMap","GOOGLE_MAPS_API_KEY","DetoxNowButton","_Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","AllDetoxCentersMap","AllDetoxCentersMap_AllDetoxCentersMapContainer","googleMapURL","loadingElement","containerElement","mapElement","location","components_DetoxNowButton_DetoxNowButton","MyLink2","root1","LandingPage","fullWidth","ComponentToShow","ComponentToProtect","ComponentToProtect2","component2","otherProps","objectWithoutProperties","RegisterUserPage","RegisterDetoxPage","Route","components_LogOutButton_LogOutButton","Fragment","Geocode","setApiKey","SMSForm","fromLatLng","then","results","formatted_address","message","body","error","alert","submitting","onHandleChange","bind","assertThisInitialized","getAttribute","objectSpread","fetch","method","JSON","stringify","res","json","success","align","disabled","multiline","rows","UserLogin","components_UserLoginNav_UserLoginNav","components_SMSForm_SMSForm","DetoxCenterLogin","getDetoxInfo","info","CardContent_default","Registration","App","HashRouter","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.8e272f00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dtnow_skline_mobile.d0543a34.svg\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = '', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n        case 'SET_TO_REGISTER_DETOX_MODE':\n        return 'detoxregister';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const currentBedCountById = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_BED_COUNT':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// user will be on the redux state at:\n// state.contacts\nexport default currentBedCountById;","const detoxInfo = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_DETOX_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// user will be on the redux state at:\n// state.contacts\nexport default detoxInfo;","const alldetoxInfo = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_All_DETOX_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// user will be on the redux state at:\n// state.contacts\nexport default alldetoxInfo;","const detoxLatLng = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_DETOX_LAT_LNG':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// user will be on the redux state at:\n// state.contacts\nexport default detoxLatLng;","const currentLocation = (state = [], action) => {\n     console.log('in currentLocationReducer', action.payload)\n    switch (action.type) {\n        case 'SET_CURRENT_LOCATION':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// user will be on the redux state at:\n// state.contacts\nexport default currentLocation;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport currentBedCountById from './currentBedCountByIdReducer';\nimport detoxInfo from './detoxInfoReducer';\nimport allDetoxInfo from './allDetoxInfoReducer';\nimport detoxLatLng from './detoxLatLngReducer';\nimport currentLocation from './currentLocationReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  currentBedCountById,\n  detoxInfo,\n  allDetoxInfo,\n  detoxLatLng,\n  currentLocation\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// saga to send contact information to server\nfunction* increaseSaga(action) {\n    console.log('in increaseSaga', action.payload );\n    const reqId = action.payload;\n    // standred js way to handle errors\n    try {\n        const response = yield call(axios.put, `/detox/increase/${reqId}`, {\n            currentBedCount: action.payload\n        });\n        yield put({\n            type: 'SET_BED_COUNT',\n            payload: response.data\n        });\n         yield put({\n             type: 'GET_DETOX_INFO_BY_ID',\n             payload: action.payload\n         });\n          yield put({\n              type: 'GET_DETOX_INFO'\n          });\n    } catch (error) {\n        console.log('error with detox increase put request', error);\n    }\n}\n\n// // saga to send decrease bed count to server\nfunction* decreaseSaga(action) {\n    console.log('in decreaseSaga', action.payload );\n     const reqId = action.payload;\n    // standred js way to handle errors\n    try {\n        const response = yield call(axios.put, `/detox/decrease/${reqId}`, {\n            currentBedCount: action.payload\n        });\n        yield put({\n            type: 'SET_BED_COUNT',\n            payload: response.data\n        });\n          yield put({\n             type: 'GET_DETOX_INFO_BY_ID',\n             payload: action.payload\n         });\n         yield put({\n             type: 'GET_DETOX_INFO'\n         });\n    } catch (error) {\n        console.log('error with decrease put request', error);\n    }\n}\n\n// saga to get detox info by id from server\nfunction* getDetoxInfoByIdSaga(action) {\n    console.log('in getDetoxInfoSaga', action.payload);\n    const reqId = action.payload;\n    try {\n        const response = yield call(axios.get, `/detox/detoxinfo/${reqId}`, {\n            currentBedCount: action.payload\n        });\n        yield put({\n            type: 'SET_DETOX_INFO',\n            payload: response.data\n        });\n    } catch (error) {\n        console.log('error with get request', error);\n    }\n}\n\n// saga to get all detox info by id from server\nfunction* getDetoxInfoSaga(action) {\n    console.log('in getDetoxInfoSaga');\n    try {\n        const response = yield call(axios.get, `/detox/detoxinfo`);\n        yield put({\n            type: 'SET_All_DETOX_INFO',\n            payload: response.data\n        });\n    } catch (error) {\n        console.log('error with get request', error);\n    }\n}\n\n// saga to get detox lat and lng for detox now default view\n// saga to get all detox info by id from server\nfunction* getDetoxWithLowestBedCountSaga(action) {\n    console.log('in getDetoxWithLowestBedCountSaga');\n    try {\n        const response = yield call(axios.get, `/detox/mincurrentbeds`);\n        yield put({\n            type: 'SET_DETOX_LAT_LNG',\n            payload: response.data\n        });\n    } catch (error) {\n        console.log('error with get request', error);\n    }\n}\n\n\nfunction* detoxSaga() {\n    yield takeLatest('INCREASE', increaseSaga);\n    yield takeLatest('DECREASE', decreaseSaga);\n    yield takeLatest('GET_DETOX_INFO_BY_ID', getDetoxInfoByIdSaga);\n    yield takeLatest('GET_DETOX_INFO', getDetoxInfoSaga);\n    yield takeLatest('GET_DETOX_WITH_LOWEST_BED_COUNT', getDetoxWithLowestBedCountSaga)\n}\n\nexport default detoxSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport detoxSaga from './detoxSaga'\n\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    detoxSaga(),\n  ]);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst styles = theme => ({\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 200,\n     \n    },\n    cssLabel: {\n        color: 'white',\n        textAlign: 'center',\n      \n    },\n    cssOutlinedInput: {\n    '&$cssFocused $notchedOutline': {\n      borderColor: `${theme.palette.primary.main} !important`,\n    }\n  },\n\n  cssFocused: {\n   \n  },\n  notchedOutline: {\n\n    borderWidth: '1px',\n    borderColor: 'white !important'\n  },\n\n});\n\nconst textArea = {\n  textAlign: 'center',\n};\n\nclass LoginTextFields extends React.Component {\n\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n          <div>\n            <form>\n        <InputLabel htmlFor=\"username\"></InputLabel>\n        <TextField\n        id=\"standard-name\"\n        style={textArea}\n        label=\"Name\"\n        variant=\"outlined\"\n        className={classes.textField}\n          value = {\n            this.props.username\n          }\n        InputLabelProps = {{\n            classes: {\n                root: classes.cssLabel,\n                focused: classes.cssFocused,\n                },\n               }\n           }\n        InputProps = {{\n                classes: {\n              root: classes.cssOutlinedInput,\n              focused: classes.cssFocused,\n              notchedOutline: classes.notchedOutline,\n        }}}\n          onChange={this.props.handleInputChangeFor('username')}\n          margin=\"normal\"\n        />\n          </form>\n    </div>\n    <div>\n        <InputLabel htmlFor=\"password\"></InputLabel>\n        <TextField\n        id=\"standard-password-input\"\n        label=\"Password\"\n        className={classes.textField}\n        type=\"password\"\n        variant=\"outlined\"\n        value = {\n          this.props.password\n        }\n        InputLabelProps = {{\n                   classes: {\n                       root: classes.cssLabel,\n                       focused: classes.cssFocused,\n                   },\n               }\n           }\n        InputProps = {{\n            classes: {\n              root: classes.cssOutlinedInput,\n              focused: classes.cssFocused,\n              notchedOutline: classes.notchedOutline,\n           \n                          \n        }}}\n          onChange = { this.props.handleInputChangeFor('password') }\n          margin=\"normal\"\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nLoginTextFields.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(LoginTextFields);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport dtnow_skline_mobile from '../LandingPage/dtnow_skline_mobile.svg';\nimport LoginTextFields from './LoginTextFields';\n\n\n// material ui style override \nconst style = {\n  root: {\n    color: '#ffffff',\n    backgroundColor: '#16233c',\n    margin: 8,\n    width: 300,\n  },\n    root2: {\n      color: '#aab1c0',\n      backgroundColor: '#373d4b',\n      margin: 8,\n      width: 300,\n    }\n};\n\n// link to registration for the user and the provider\nconst MyLink1 = props => < Link to = \"/registration\" {\n  ...props\n}\n/>\n\nclass LoginPage extends Component {\n  \n  // store username, password, user level\n  state = {\n    username: '',\n    password: '',\n    clearance_level: 0,\n  };\n\n  // run these as soon as possible \n  componentDidMount() {\n      // get detox center with most amount of beds available \n      this.getDetoxWithMostBedsAvailable();\n  }\n\n  // take the user to their home page when logged in\n  componentDidUpdate(prevProps) {\n    if (this.props.user !== prevProps.user) {\n      this.props.history.push('/home');\n    }\n  }\n\n  // getDetoxWithMostBedsAvailable dispatches a call to find the detox with the most beds available\n  getDetoxWithMostBedsAvailable = (event) => {\n    this.props.dispatch({\n      type: 'GET_DETOX_WITH_LOWEST_BED_COUNT'\n    });\n    this.getGeoLocation();\n  }\n\n   // captures users current location and sets coords to reduxstate\n   getGeoLocation = () => {\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition(\n         (position) => {\n           console.log('in getGeoLoaction', 'lat: ', position.coords.latitude, 'lng:', position.coords.longitude)\n         this.props.dispatch({\n           type: 'SET_CURRENT_LOCATION', payload: {\n             lat: position.coords.latitude,\n             lng: position.coords.longitude\n           }\n         });\n         console.log('found current location', 'lat:', position.coords.latitude,\n           'lng:', position.coords.longitude );\n         }\n       )\n     } else {\n       console.log('Location services not supported by your browser');\n       // try again\n       this.getGeoLocation();\n     }\n   }\n\n   // logs user in\n   login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } \n\n  // sets input values into state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\nrender() {\n  return (\n    <div>\n       <section className=\"App-header\">\n          <center>\n              <div>\n                  {/* detox now logo accessed via firebase url */}\n                  <img \n                      src=\"https://firebasestorage.googleapis.com/v0/b/detox-now.appspot.com/o/dtnow-red.png?alt=media&token=5c6c5842-1e82-478d-98ae-4b156d42442b\" \n                      className=\"detoxlogo\" \n                      height=\"auto\" \n                      width=\"300\" \n                      alt=\"logo\" />\n              </div>\n            </center>\n              <div>\n                {/* city skylinee outline image in current directory */}\n                <img \n                  src={dtnow_skline_mobile} \n                  alt=\"city outline\"/>\n              </div>\n        </section>\n        <section className=\"grayBackground\">\n                {/* warning message if login fails */}\n                {this.props.errors.loginMessage && (\n                  <h2\n                    className=\"alert\"\n                    role=\"alert\"\n                  >\n                    {this.props.errors.loginMessage}\n                  </h2>\n                )}\n          <h1 className=\"whitetext\">Login</h1>\n            <LoginTextFields \n              handleInputChangeFor = { this.handleInputChangeFor }\n              state = { this.state }\n            />\n            <br/>\n            <div>\n            <Button\n              size=\"large\"\n              style={style.root}\n              onClick = {\n                this.login\n              }\n             >\n            Login\n            </Button>\n            </div>\n            <div>\n               <Button\n              size=\"large\"\n              style={style.root2}\n              component={MyLink1}\n             >\n            Register\n            </Button>\n            </div>\n      </section>\n\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst styles = theme => ({\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 200,\n     \n    },\n    cssLabel: {\n        color: 'white',\n        textAlign: 'center',\n      \n    },\n    cssOutlinedInput: {\n        '&$cssFocused $notchedOutline': {\n        borderColor: `${theme.palette.primary.main} !important`,\n        }\n    },\n    cssFocused: {\n    \n    },\n    notchedOutline: {\n        borderWidth: '1px',\n        borderColor: 'white !important'\n    },\n});\n\nclass UserTextFields extends React.Component {\n\n\nrender() {\n    const { classes } = this.props;\n        return (\n            <div>\n                <div>\n                    <InputLabel htmlFor=\"username\"></InputLabel>\n                    <TextField\n                        id=\"standard-name\"\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        value = {\n                            this.props.username\n                        }\n                        InputLabelProps = {{\n                            classes: {\n                                root: classes.cssLabel,\n                                focused: classes.cssFocused,\n                                },\n                            }\n                        }\n                        InputProps = {{\n                                classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline,\n                        }}}\n                        onChange={this.props.handleInputChangeFor('username')}\n                        margin=\"normal\"\n                    />\n                </div>\n                <div>\n                    <InputLabel htmlFor=\"number\"></InputLabel>\n                    <TextField\n                    id=\"standard-password-input\"\n                    label=\"Phone Number\"\n                    className={classes.textField}\n                    type=\"phone number\"\n                    variant=\"outlined\"\n                    value = {\n                    this.props.password\n                    }\n                    InputLabelProps = {{\n                            classes: {\n                                root: classes.cssLabel,\n                                focused: classes.cssFocused,\n                            },\n                        }\n                    }\n                    InputProps = {{\n                        classes: {\n                        root: classes.cssOutlinedInput,\n                        focused: classes.cssFocused,\n                        notchedOutline: classes.notchedOutline,\n                    \n                                    \n                    }}}\n                    onChange = { this.props.handleInputChangeFor('number') }\n                    margin=\"normal\"\n                    />\n                </div>\n                <div>\n                    <InputLabel htmlFor=\"password\"></InputLabel>\n                    <TextField\n                    id=\"standard-password-input\"\n                    label=\"Password\"\n                    className={classes.textField}\n                    type=\"password\"\n                    variant=\"outlined\"\n                    value = {\n                    this.props.password\n                    }\n                    InputLabelProps = {{\n                            classes: {\n                                root: classes.cssLabel,\n                                focused: classes.cssFocused,\n                            },\n                        }\n                    }\n                    InputProps = {{\n                        classes: {\n                        root: classes.cssOutlinedInput,\n                        focused: classes.cssFocused,\n                        notchedOutline: classes.notchedOutline,\n                    \n                                    \n                    }}}\n                    onChange = { this.props.handleInputChangeFor('password') }\n                    margin=\"normal\"\n                    />\n                </div>\n        </div>\n        );\n    }\n}\n\nUserTextFields.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(UserTextFields);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport dtnow_skline_mobile from '../LandingPage/dtnow_skline_mobile.svg';\nimport UserTextFields from './UserTextFields';\n\n\n// material ui style override \nconst style = {\n  root: {\n    color: '#ffffff',\n    backgroundColor: '#16233c',\n    margin: 8,\n    width: 300,\n  },\n};\n\nclass RegisterPage extends Component {\n\n  // stores user input values\n  state = {\n    username: '',\n    password: '',\n    clearance_level: 1,\n    number: 0\n  };\n\n    componentDidUpdate(prevProps) {\n      // Typical usage (don't forget to compare props):\n      if (this.props.user !== prevProps.user) {\n        this.props.history.push('/home');\n      }\n    }\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password&& this.state.number) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          clearance_level: this.state.clearance_level,\n          number: this.state.number\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } \n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n          <section className=\"App-header\">\n          <center>\n              <div>\n                  {/* detox now logo accessed via firebase url */}\n                  <img \n                      src=\"https://firebasestorage.googleapis.com/v0/b/detox-now.appspot.com/o/dtnow-red.png?alt=media&token=5c6c5842-1e82-478d-98ae-4b156d42442b\" \n                      className=\"detoxlogo\" \n                      height=\"auto\" \n                      width=\"300\" \n                      alt=\"logo\" />\n              </div>\n            </center>\n              <div>\n                {/* city skylinee outline image in current directory */}\n                <img \n                  src={dtnow_skline_mobile} \n                  alt=\"city outline\"/>\n              </div>\n        </section>\n         <section className=\"grayBackground\">\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n          <h1 className=\"whitetext\">Register</h1>\n          {/* <div>\n            <InputLabel htmlFor=\"username\"></InputLabel>\n              <TextField\n                id=\"username-input\"\n                label = \"username\"\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <div>\n            <InputLabel htmlFor=\"password\"></InputLabel>\n              <TextField\n                id=\"password-input\"\n                label = \"password\"\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div> */}\n             <UserTextFields \n              handleInputChangeFor = { this.handleInputChangeFor }\n              state = { this.state }\n            />\n            <br/>\n          <div>\n            <Button\n              size=\"large\"\n              style={style.root}\n              onClick={this.registerUser}\n            >\n            Register and Continue\n            </Button>\n          </div>\n          </section>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\nconst style = {\n  color: '#ffffff',\n  backgroundColor: '#000000',\n};\n\n\n// link to login page\nconst MyLink = props => < Link to = \"/landingpage\" { ...props\n}\n/>\n\nconst BackButton = (props) => (\n  <div>\n    <center>\n      <Button \n        className=\"Button\"\n        size=\"large\" \n        variant=\"contained\" \n        style={style} \n        component={MyLink}>\n        \n      Back\n      </Button>\n   </center>\n  </div>\n);\n\nexport default BackButton;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { TextField } from '@material-ui/core';\nimport BackButton from '../BackButton/BackButton';\n\nclass RegisterPage extends Component {\n\n  // stores input values \n  state = {\n    username: '',\n    password: '',\n    clearance_level: 2,\n    detox_center_name: '',\n    address: '',\n    city: '',\n    state: '',\n    zip: 0,\n    total_bed_count: 0\n  };\n\n  // resgisters a detox center\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password && this.state.detox_center_name && this.state.address && this.state.city &&\n      this.state.state && this.state.zip && this.state.total_bed_count) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          clearance_level: this.state.clearance_level,\n          detox_center_name: this.state.detox_center_name,\n          address: this.state.address,\n          city: this.state.city,\n          state: this.state.state,\n          zip: this.state.zip,\n          total_bed_count: this.state.total_bed_count\n        },\n      });\n    }  else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } \n\n  // sets input values into state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        < form className = \"form\" onSubmit={this.registerUser}>\n          <h1>Register as a Detox Center</h1>\n            <div>\n          </div>\n          <div>\n            <InputLabel htmlFor=\"username\"></InputLabel>\n              <TextField\n                id=\"username-input\"\n                label = \"Username\"\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <div>\n            < InputLabel htmlFor = \"password\"></InputLabel> \n              <TextField\n                id=\"password-input\"\n                label = \"Password\"\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div>\n            <div>\n            <InputLabel htmlFor=\"detox_center_name\"></InputLabel>\n              <TextField\n                id = \"detox_center_name-input\"\n                label = \"Detox Center Name\"\n                type=\"text\"\n                name=\"detox_center_name\"\n                value={this.state.detox_center_name}\n                onChange={this.handleInputChangeFor('detox_center_name')}\n              />\n          </div>\n           <div>\n            <InputLabel htmlFor=\"address\"></InputLabel>\n              <TextField\n                id=\"address-input\"\n                label = \"Address\"\n                type=\"address\"\n                name=\"address\"\n                value={this.state.address}\n                onChange={this.handleInputChangeFor('address')}\n              />\n          </div>\n          <div>\n            <small>ex. 107 chesnut st NE</small>\n          </div>\n            <div>\n            <InputLabel htmlFor=\"city\"></InputLabel>\n              <TextField\n                id=\"city-input\"\n                label = \"City\"\n                type=\"city\"\n                name=\"city\"\n                value={this.state.city}\n                onChange={this.handleInputChangeFor('city')}\n              />\n          </div>\n            <div>\n            <InputLabel htmlFor=\"state\"></InputLabel>\n              <TextField\n                id=\"state-input\"\n                label = \"State\"\n                type=\"state\"\n                name=\"state\"\n                value={this.state.state}\n                onChange={this.handleInputChangeFor('state')}\n              />\n          </div>\n            <div>\n            <InputLabel htmlFor=\"zip\"></InputLabel>\n              <TextField\n                id=\"zip-input\"\n                label = \"Zip\"\n                type=\"zip\"\n                name=\"zip\"\n                value={this.state.zip}\n                onChange={this.handleInputChangeFor('zip')}\n              />\n          </div>\n            <div>\n            <InputLabel htmlFor=\"total_bed_count\"></InputLabel>\n              <TextField\n                id=\"total_bed_count-input\"\n                label = \"Total Bed Count\"\n                type = \"total_bed_count\"\n                name = \"total_bed_count\"\n                value={this.state.total_bed_count}\n                onChange={this.handleInputChangeFor('total_bed_count')}\n              />\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <BackButton/>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","\nimport React, {Component} from \"react\";\nimport {connect} from 'react-redux';\n\n// google maps api \nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\n\n// material ui\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\n\n\n\n\nclass AllDetoxCentersMapContainer extends Component {\n\n    // get registered detox center info as soon as possible \n    componentDidMount() {\n          this.getAllDetoxInfo();\n      }\n\n    // getAllDetoxInfo dispatches a call to get detox info\n    getAllDetoxInfo = (event) => {\n          this.props.dispatch({\n              type: 'GET_DETOX_INFO'\n          });\n      }\n\n    state = {\n        detox_center_name: '',\n        isOpen: false,\n        activeMarker: null,\n        detox_id: 0\n\n    }\n\n\n \n\nrender (){\n    return (\n        <div>\n        <GoogleMap\n            defaultZoom={10}\n            center = {{lat: 44.975918, lng: -93.273079 }}>\n            <div>\n            { /* loops through allDetoxInfoReducer to provide marker posistions with coordinates \n            and provides content for infowindow below*/ }\n            {this.props.reduxState.allDetoxInfo.map(marker =>\n                <div key={marker.detox_id}>\n                    <Marker \n                    position = {\n                        {\n                        lat: Number(marker.lat),\n                        lng: Number(marker.lng)\n                        }\n                        \n                    }\n                    // sets state to ensure infowindow matches marker, sets destination, sets fulladdress\n                    onClick = {() => this.setState({\n                                    isOpen: !this.state.isOpen,\n                                    activeMarker: marker.detox_id,\n                                    detox_id: marker.detox_id,\n                                    detox_center_name: marker.detox_center_name,\n                                    destination: {\n                                        lat: marker.lat,\n                                        lng: marker.lng\n                                    }\n                            })\n                    }\n                    >\n            {this.state.activeMarker === marker.detox_id &&\n        \n            <InfoWindow>\n                <Card  className=\"infoWindow\" key={marker.detox_id}>\n                    <center>\n                    <h3>{marker.detox_center_name}</h3>\n                    <h4>Beds Available:</h4>\n                    <h3>{Number(marker.total_bed_count) - Number(marker.current_bed_count)}</h3>\n                    <div>\n                    <Button \n                        size=\"small\" \n                        variant=\"contained\" \n                        color=\"primary\"\n                        href = {\n                            'http://www.google.com/maps/place/' + marker.lat + ',' + marker.lng\n                        }\n                        >\n                    Open in Google Maps\n                    </Button> \n                    </div>\n                    </center>\n                </Card>\n            </InfoWindow> }\n            </Marker>\n            </div>\n            )} \n        </div>\n      </GoogleMap>\n      </div>\n    );\n  }\n}\n\n\n\nconst mapreduxStateToProps = reduxState => ({\n    reduxState\n});\n\nexport default connect(mapreduxStateToProps)(withScriptjs(withGoogleMap(AllDetoxCentersMapContainer)));\n\n\n\n","const GOOGLE_MAPS_API_KEY = 'AIzaSyAO0APIwTGpe4qXDwhFRYDxfeRTJ6oPNAk';\n\nexport default GOOGLE_MAPS_API_KEY;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nconst style = {\n  color: '#ffffff',\n  backgroundColor: '#000000',\n};\n\n\nexport class DetoxNowButton extends Component {\n\n    // get detox center with most amount of beds available\n    componentDidMount() {\n        this.getDetoxWithMostBedsAvailable();\n    }\n\n    // getDetoxWithMostBedsAvailable dispatches a call to find the detox with the most beds available\n    getDetoxWithMostBedsAvailable = (event) => {\n        this.props.dispatch({\n            type: 'GET_DETOX_WITH_LOWEST_BED_COUNT'\n        });\n    }\n\n  render() {\n    return (\n      <div className=\"buttonMargins\">\n        <center>\n        <Button\n          className=\"Button\"\n          size=\"large\" \n          variant=\"contained\" \n          style={style}\n          href = {\n            'http://www.google.com/maps/place/' + this.props.reduxState.detoxLatLng.lat + ',' + this.props.reduxState.detoxLatLng.lng\n          }\n        >\n          Get a Bed\n          </Button>\n        </center>\n      </div>\n    );\n  }\n}\n\nconst mapreduxStateToProps = reduxState => ({\n  reduxState\n});\n\nexport default connect(mapreduxStateToProps)(DetoxNowButton);\n","import React, { Component } from 'react';\nimport AllDetoxCentersMapContainer from './AllDetoxCentersMapContainer';\nimport {connect} from 'react-redux';\nimport GOOGLE_MAPS_API_KEY from '../api_key';\nimport LoginButton from '../LoginButton/LoginButton';\nimport DetoxNowButton from '../DetoxNowButton/DetoxNowButton';\nimport RegisterButton from '../RegisterButton/RegisterButton';\nimport Button from '@material-ui/core/Button';\n\n\nclass AllDetoxCentersMap extends Component {\n\n\nrender() {\n\t\treturn ( \n            <div>\n                <AllDetoxCentersMapContainer\n                    className = \"mapBorder\" \n                    \n                    // google api key needed \n                    googleMapURL = {\n                        `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`\n                    }\n                    loadingElement={<div style={{ height: `50%`, width: `100%` }} />}\n                    containerElement={<div id=\"map\"\n                        style = {\n                            {\n                                position: `absolute`, height: `100%`,\n                                width: `100%`\n                            }\n\n                        }\n                        \n                        />}\n                    mapElement={<div style={{ height: `100%` }} />}\n                    location = {\n                        {\n                            lat: 44.975918,\n                            lng: -93.273079\n                        }\n                    }\n                    \n\t\t\t/>\n            <footer>\n            <DetoxNowButton />\n            </footer>\n            </div>\n    );\n  }\n}    \n\nconst mapreduxStateToProps = reduxState => ({\n    reduxState\n});\n\nexport default connect(mapreduxStateToProps)(AllDetoxCentersMap);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport dtnow_skline_mobile from './dtnow_skline_mobile.svg';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\n\n\n\n\n// link to all detox center map and detox now button\nconst MyLink = props => < Link to = \"/alldetoxcentersmap\" {\n    ...props\n}\n/>\n\n// link to registration for the user and the provider\nconst MyLink1 = props => < Link to = \"/registration\" {\n    ...props\n}\n/>\n\n// link to for the user and the provider login page\nconst MyLink2 = props => < Link to = \"/login\" {\n    ...props\n}\n/>\n\nconst style = {\n    root: {\n        color: '#ffffff',\n        backgroundColor: '#16233c',\n        width: 140,\n        margin: 8, \n    },\n    root1: {\n        color: '#ffffff',\n        backgroundColor: '#ce0019',\n        margin: 8,\n        width: 300,\n    },\n     root2: {\n        color: '#aab1c0',\n        backgroundColor: '#373d4b',\n        margin: 8,\n        width: 300,\n    }\n};\n\n\n\nexport class LandingPage extends Component {\n\n\n  render() {\n    return (\n        <div>\n            <section className=\"App-header\">\n            <center>\n                <div>\n                    {/* detox now logo accessed via firebase url */}\n                    <img \n                        src=\"https://firebasestorage.googleapis.com/v0/b/detox-now.appspot.com/o/dtnow-red.png?alt=media&token=5c6c5842-1e82-478d-98ae-4b156d42442b\" \n                        className=\"detoxlogo\" \n                        height=\"auto\" \n                        width=\"300\" \n                        alt=\"logo\" />\n                </div>\n                </center>\n                <div>\n                    {/* city skylinee outline image in current directory */}\n                    <img \n                    src={dtnow_skline_mobile} \n                    alt=\"city outline\"/>\n                </div>\n        </section>\n        <section className=\"grayBackground\">\n        <section>\n        <section>\n          \n            <center>\n                <div className=\"container\">\n                 <div  className=\"mission\" >\n                <p>\n                    It is difficult to find available beds at detox centers and the location of person calling or messaging\n                    for help getting to a detox center.DetoxNow helps ameliorate these problems.\n                </p>\n                 </div>\n                 </div>\n            </center>\n        </section>\n        <section>\n            <center>\n            <div className=\"container\">\n                <Button \n                    className=\"alignLeft\"\n                    size=\"large\"\n                    style={style.root}\n                    component={MyLink2}\n                    >\n                Login\n                </Button>\n                <Button \n                    className=\"alignRight\"\n                    size=\"large\"\n                    style={style.root}\n                    component={MyLink1}>\n                Register\n                </Button>\n            </div>\n            </center>\n                <div>\n                <Button \n                    size=\"large\"\n                    fullWidth={true}\n                    style={style.root1}\n                    component={MyLink}> \n                Continue As Guest\n                </Button>\n            </div>\n            <div>\n                <Button \n                    size=\"large\"\n                    fullWidth={true}\n                    style={style.root2}\n                      component={MyLink2}\n                    >\n                Provider Login \n                </Button>\n               </div>\n        </section>\n  \n        </section>\n      \n        </section>\n        </div>\n  \n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n}); \nexport default connect(mapReduxStateToProps)(LandingPage);\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterUserPage from '../Registration/RegisterUserPage';\nimport RegisterDetoxPage from '../Registration/RegisterDetoxPage';\nimport AllDetoxCentersMap from '../AllDetoxCentersMap/AllDetoxCentersMap';\nimport { LandingPage } from '../LandingPage/LandingPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    // component user sees when they log in\n    component: ComponentToProtect,\n    // component detox center sees when they log in\n    component2: ComponentToProtect2,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n  // only show routes to corresponding clearance_level \n  // component user sees when they log in\n  if(user.id && user.clearance_level === 1) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  }\n  // component detox center sees when they log in\n  else if (user.id && user.clearance_level === 2) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect2;\n  }\n    else if (loginMode === '') {\n      // if they are not logged in, check the loginMode on Redux State\n      // if the mode is 'login', show the LoginPage\n      ComponentToShow = LandingPage;\n    }\n  else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n     ComponentToShow = LoginPage;\n  } else if (loginMode === 'register'){\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterUserPage;\n\n  } else if (loginMode === 'detoxregister') {\n    ComponentToShow = RegisterDetoxPage;\n  } else {\n    ComponentToShow = LoginPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nconst LogOutButton = props => (\n  <Button\n  size = \"medium\"\n  variant = \"contained\"\n  color = \"primary\"\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </Button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './UserLoginNav.css';\n\n\n\nconst UserLoginNav = (props) => (\n  <div className=\"nav\">\n   {props.user.id && (\n     <div>\n        <div>\n          <LogOutButton className=\"nav-right\"/>\n          </div>\n      <div className=\"center\">\n        <>\n           <div className=\"center\" >\n              Welcome, { props.user.username }!\n            {/* Your ID is: {props.user.id} */}\n          </div>\n        </>\n    </div>\n    </div>\n     )}\n  </div>\n);\n\n// get user info from state\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(UserLoginNav);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './SMSForm.css';\n\n// material ui\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Card from '@material-ui/core/Card';\n\n// google maps api\nimport Geocode from \"react-geocode\";\n// google api key needed\nimport GOOGLE_MAPS_API_KEY from '../api_key';\nGeocode.setApiKey(GOOGLE_MAPS_API_KEY);\n\n\n\nclass SMSForm extends Component {\n\n  // get location as soon as possible\n  componentDidMount() {\n    this.getGeoLocation();\n  }\n\n  // state storing message with number and current location \n  constructor(props) {\n      super(props);\n      this.state = {\n          message: {\n            to: '',\n            body:  'Your current location will appear here'\n          },\n          submitting: false,\n          error: false\n        };\n        this.onHandleChange = this.onHandleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // captures users current location \n  getGeoLocation = () => {\n      if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n              (position) => {\n                  // sets current location coordinates latituude and longitude\n                  console.log('lat: ', position.coords.latitude, 'lng:', position.coords.longitude)\n                          // convert coordinates to address\n                          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                              response => {\n                                  const address = response.results[0].formatted_address;\n                                  console.log(address);\n                                    // sets message body into set\n                                    this.setState({\n                                         message: {\n                                             body: `From: ${this.props.user.username}, ${this.props.user.number}\n                                             I need help getting to a detox center, can you come get me here: ${address}`\n                                         }\n                                     });\n                              },\n                              error => {\n                                  console.error(error);\n                              }\n                          );\n                  }\n              )\n          } else {\n              alert('Location services not supported by your browser');\n          }\n      }\n  \n  // captures user input\n  onHandleChange(event) {\n       const name = event.target.getAttribute('name');\n       this.setState({\n           message: { ...this.state.message,\n               [name]: event.target.value\n           }\n       });\n   }\n  \n  // when the send message button is clicked, send information to server to make twilio api request\n  onSubmit(event) {\n        event.preventDefault();\n        this.setState({ submitting: true });\n        fetch('/api/messages', {\n            method: 'POST',\n            headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.message)\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          this.setState({\n            error: false,\n            submitting: false,\n            message: {\n              to: '',\n              body: ''\n            }\n          });\n          alert(\"Message Sent\");\n        } else {\n          this.setState({\n            error: true,\n            submitting: false\n          });\n        }\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div align = \"center\">\n          <Card className=\"card4\">\n              <form onSubmit={this.onSubmit} className={this.state.error ? 'error sms-form' : 'sms-form'}>\n                <div className=\"sms-form div\">\n                  <InputLabel className = \"sms-form label\" htmlFor=\"to\">To:</InputLabel>\n                  < TextField\n                    className=\"sms-form label\"\n                    type=\"tel\" \n                    name=\"to\" \n                    id=\"to\"\n                    value={this.state.message.to}\n                    onChange={this.onHandleChange}\n                  />\n                </div>\n                <div>\n                  <InputLabel htmlFor=\"body\">Body:</InputLabel>\n                  <TextField\n                    disabled\n                    id = \"outlined-multiline-static\"\n                    multiline rows = \"9\"\n                    value = {this.state.message.body}\n                    name=\"body\" \n                    onChange={this.onHandleChange}\n                    />\n                </div>\n                <Button variant=\"raised\" color=\"primary\" className = \"sms-form button\" type=\"submit\" disabled={this.state.submitting}>\n                  Send Message\n                </Button>\n            </form>\n          </Card>\n        </div>\n      </div>\n    );\n  }  \n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(SMSForm);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport UserLoginNav from '../UserLoginNav/UserLoginNav';\nimport SMSForm from '../SMSForm/SMSForm';\n\n\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\n\nexport class UserLogin extends Component {\n\n \n  render() {\n    return (\n      <div className=\"background\">\n        <UserLoginNav />\n        <SMSForm />\n      </div>\n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({\n  reduxState\n});\n\nexport default connect(mapReduxStateToProps)(UserLogin);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\n// material ui \nimport { CardActions } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport UserLoginNav from '../UserLoginNav/UserLoginNav';\n\nexport class DetoxCenterLogin extends Component {\n\n       // Renders the entire app on the DOM\n       componentDidMount() {\n         this.getDetoxInfo();\n       }\n\n       // getContacts dispatches a call to get contacts \n       getDetoxInfo = (event) => {\n         this.props.dispatch({\n           type: 'GET_DETOX_INFO_BY_ID',\n           payload: this.props.reduxState.user.id\n         });\n       }\n\n\n  render() {\n    return (\n      <div align=\"center\">\n        <UserLoginNav/>\n         <Card id=\"card\">\n           {this.props.reduxState.detoxInfo.map(info => (\n             <div key={info.detox_id}>\n           <h1 className=\"center2\">{info.detox_center_name}</h1>\n           </div>\n           ))}\n            <CardContent> \n              <table align=\"center\">\n                <thead>\n                  <tr>\n                  <th>Max Bed Count</th><th>Current Bed Count</th>\n                  </tr>\n                </thead>\n            {this.props.reduxState.detoxInfo.map(info => ( \n                <tbody key= {info.id} align=\"center\" >\n                  <tr>\n                    <td>{info.total_bed_count}</td> \n                    <td>{info.current_bed_count}</td>\n                    </tr>\n                  </tbody>\n                    ))}\n              </table>\n            </CardContent>\n              <div className=\"detoxCenterBtn\">\n                 <CardActions>\n                  <Button\n                  size = \"large\"\n                  variant = \"contained\"\n                  color = \"primary\"\n                  type=\"button\"\n                  onClick={() => {this.props.dispatch({type: 'INCREASE', payload: this.props.reduxState.user.id})\n                  this.getDetoxInfo();\n                  }}\n                  >\n                    Increase\n                  </Button>\n                  <Button\n                    size = \"large\"\n                    variant = \"contained\"\n                    color = \"primary\"\n                    type=\"button\"\n                    onClick={() => {this.props.dispatch({type: 'DECREASE', payload: this.props.reduxState.user.id})\n                    this.getDetoxInfo();\n                    }}\n                  >\n                    Decrease\n                  </Button>\n                </CardActions>\n                   </div>\n             </Card>\n      </div>\n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n}); \nexport default connect(mapReduxStateToProps)(DetoxCenterLogin);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport dtnow_skline_mobile from '../LandingPage/dtnow_skline_mobile.svg';\n\n// material ui style override \nconst style = {\n  root: {\n    color: '#ffffff',\n    backgroundColor: '#16233c',\n    margin: 8,\n    width: 300,\n  },\n};\n\n\n\n// link to login page\nconst MyLink = props => < Link to = \"/registeruser\" {\n  ...props\n}\n/>\n\n// link to login page\nconst MyLink2 = props => < Link to = \"/registerdetox\" {\n  ...props\n}\n/>\n\nclass Registration extends Component {\n\n\n  render() {\n    return (\n      <div>\n               <section className=\"App-header\">\n          <center>\n              <div>\n                  {/* detox now logo accessed via firebase url */}\n                  <img \n                      src=\"https://firebasestorage.googleapis.com/v0/b/detox-now.appspot.com/o/dtnow-red.png?alt=media&token=5c6c5842-1e82-478d-98ae-4b156d42442b\" \n                      className=\"detoxlogo\" \n                      height=\"auto\" \n                      width=\"300\" \n                      alt=\"logo\" />\n              </div>\n            </center>\n              <div>\n                {/* city skylinee outline image in current directory */}\n                <img \n                  src={dtnow_skline_mobile} \n                  alt=\"city outline\"/>\n              </div>\n        </section>\n        <section className=\"grayBackground\">\n        <h1 className=\"whitetext\">Register As</h1>\n        <center>\n          <Button\n            size=\"large\"\n            style={style.root}\n            component={MyLink}\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register as a User\n          </Button>\n             <div className=\"container\">\n                 <div  className=\"mission\" >\n          <p>When you register, you'll be able to send a meassage containing your phone number and exact location for ease of contact and pickup</p>\n          </div>\n          </div>\n          <br/>\n           <Button\n            size=\"large\"\n            style={style.root}\n            component={MyLink2}\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_DETOX_MODE'})}}\n          >\n            Register as a Detox Center \n          </Button>\n             <div className=\"container\">\n                 <div  className=\"mission\" >\n          <p>When you register, you'll be able to update bed counts allowing for patients to find the detox center with the most beds available</p>\n        </div>\n        </div>\n        </center>\n      </section>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(Registration);\n\n","import React, {Component} from 'react';\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport AllDetoxCentersMap from '../AllDetoxCentersMap/AllDetoxCentersMap';\nimport UserLogin from '../UserLogin/UserLogin';\nimport SMSForm from '../SMSForm/SMSForm';\nimport DetoxCenterLogin from '../DetoxCenterLogin/DetoxCenterLogin';\nimport './App.css';\nimport LoginPage from '../LoginPage/LoginPage';\nimport Registration from '../Registration/Registration';\nimport RegisterUserPage from '../Registration/RegisterUserPage';\nimport RegisterDetoxPage from '../Registration/RegisterDetoxPage';\nimport { LandingPage } from '../LandingPage/LandingPage';\n\n\n\nclass App extends Component {\n\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n     // get destination \n     this.getDetoxWithMostBedsAvailable();\n  }\n\n    // getDetoxWithMostBedsAvailable dispatches a call to find the detox with the most beds available\n    getDetoxWithMostBedsAvailable = (event) => {\n      this.props.dispatch({\n        type: 'GET_DETOX_WITH_LOWEST_BED_COUNT'\n      });\n      // get current location \n      this.getGeoLocation();\n    }\n\n  // captures users current location and sets coords to reduxstate\n  getGeoLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          console.log('in getGeoLoaction', 'lat: ', position.coords.latitude, 'lng:', position.coords.longitude)\n          this.props.dispatch({\n            type: 'SET_CURRENT_LOCATION',\n            payload: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          });\n          console.log('found current location', 'lat:', position.coords.latitude,\n            'lng:', position.coords.longitude);\n        }\n      )\n    } else {\n      console.log('Location services not supported by your browser');\n      // try again\n      this.getGeoLocation();\n    }\n  }\n  \n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n              <Route\n              exact\n              path= \"/landingpage\"\n              component={LandingPage}\n            />\n            <Route\n              exact\n              path= \"/alldetoxcentersmap\"\n              component={AllDetoxCentersMap}\n            />\n             <Route\n              exact\n              path= \"/login\"\n              component={LoginPage}\n            />\n              <Route\n              exact\n              path= \"/registration\"\n              component={Registration}\n            />\n                 <Route\n              exact\n              path= \"/registeruser\"\n              component={RegisterUserPage}\n            />\n                  <Route\n              exact\n              path= \"/registerdetox\"\n              component={RegisterDetoxPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n             <ProtectedRoute\n              exact\n              path=\"/home\"\n              // page user sees when they log in\n              component={UserLogin}\n              // page detox center sees when they log in\n              component2={DetoxCenterLogin}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n              <ProtectedRoute\n              exact\n              path=\"/smsform\"\n              component={SMSForm}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n             {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          {/* <Footer/> */}\n        </div>\n        \n      </Router>\n      \n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}